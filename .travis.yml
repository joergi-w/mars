version: ~> 1.0
os: linux
dist: bionic
language: cpp
cache:
  ccache: true
  directories:
    - vienna-build/
    - mycache/

git:
  submodules: true
  quiet: true
  depth: 3

addons:
  apt:
    sources:
      - sourceline: 'ppa:ubuntu-toolchain-r/test'
    packages:
      - g++-7
#      - g++-8
      - g++-9
      - g++-10
      - libboost-all-dev
  homebrew:
    packages:
      - ccache

# https://docs.travis-ci.com/user/languages/c
jobs:
  include:
    - os: linux
      name: "Release gcc7"
      cache: [ccache, apt]
      env:
        - CXX=g++-7
        - CC=gcc-7
        - BUILD_TYPE=Release
#    - os: linux
#      name: "Release gcc8"
#      cache: [ccache, apt]
#      env:
#        - CXX=g++-8
#        - CC=gcc-8
#        - BUILD_TYPE=Release
#    - os: linux
#      name: "Release gcc9 std=c++2a"
#      cache: [ccache, apt]
#      env:
#        - CXX=g++-9
#        - CC=gcc-9
#        - BUILD_TYPE=Release
#        - CXXFLAGS=-std=c++2a
    - os: linux
      name: "Debug gcc9"
      cache: [ccache, apt]
      env:
        - CXX=g++-9
        - CC=gcc-9
        - BUILD_TYPE=Debug
    - os: linux
      name: "Release gcc10"
      cache: [ccache, apt]
      env:
        - CXX=g++-10
        - CC=gcc-10
        - BUILD_TYPE=Release
        - CXXFLAGS="-std=c++17 -fconcepts"
#    - os: osx
#      name: "Release gcc10 Xcode12.2"
#      osx_image: xcode12.2
#      env:
#        - CXX=g++-10
#        - CC=gcc-10
#        - BUILD_TYPE=Release
    - os: linux
      name: "Documentation"
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - g++-9
            - doxygen
            - doxygen-doc
            - doxygen-latex
            - graphviz
      script:
        - doxygen --version
        - doxygen -u doc/Doxyfile
        - make -j 2 doc 2>doxygen_warnings.txt
        - cat doxygen_warnings.txt && test ! -s doxygen_warnings.txt
      env:
        - CXX=g++-9
        - CC=gcc-9
        - BUILD_TYPE=Debug
  allow_failures:
    - name: "Documentation"
  fast_finish: true

install:
  - |
    # install cmake 3.8.2 if we are on linux
    if [ "$TRAVIS_OS_NAME" = "linux" ]
    then
      CMAKE_VERSION="3.8.2"
      mkdir -p /tmp/cmake-download
      wget --no-clobber --directory-prefix=/tmp/cmake-download/ \
        https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
      tar -C /tmp/ -zxf /tmp/cmake-download/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
      export PATH="/tmp/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:${PATH}"
    fi
  - $CXX -v
  - cmake --version
  - |
    # install ViennaRNA, unless we are building documentation
    mkdir -p mycache
    if [ "$TRAVIS_JOB_NAME" != "Documentation" ]
    then
      # check if a cached build exists
      if [ ! -f "vienna-build/ViennaRNA-2.4.16/src/ViennaRNA/libRNA.la" ]
      then
        mkdir -p /tmp/vienna-download
        mkdir -p vienna-build
        wget --no-clobber --directory-prefix=/tmp/vienna-download/ \
          https://www.tbi.univie.ac.at/RNA/download/sourcecode/2_4_x/ViennaRNA-2.4.16.tar.gz
        tar -C vienna-build/ -zxf /tmp/vienna-download/ViennaRNA-2.4.16.tar.gz
      fi
      cd vienna-build/ViennaRNA-2.4.16
      ./configure --cache-file=../../mycache/config.cache --disable-mpfr --without-gsl --without-perl \
        --without-python --without-python3 --without-doc --without-tutorial --without-kinfold \
        --without-forester --without-check --without-rnalocmin --disable-openmp
      make -j
      sudo make install
      cd -
    fi

before_script:
  - mkdir build
  - cd build
  - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE}

script:
  - make -k -j2 api_test cli_test
  - ctest . --output-on-failure
